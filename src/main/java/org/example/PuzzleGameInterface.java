package org.example;


import java.util.Map;

/**
 * Интерфейс для игры в загадки.
 */
public interface PuzzleGameInterface {
    /**
     * Начинает новую головоломку для указанного чата.
     *
     * @param chatId Идентификатор чата, в котором начинается головоломка.
     * @return Сообщение с вопросом текущей головоломки.
     */
    String startPuzzle(long chatId);

    /**
     * Проверяет ответ пользователя на текущую головоломку.
     *
     * @param chatId     Идентификатор чата, откуда получен ответ пользователя.
     * @param userAnswer Ответ пользователя на головоломку.
     * @return Сообщение с результатом проверки ответа пользователя.
     */
    String checkAnswer(long chatId, String userAnswer);

    /**
     * Возвращает подсказку для текущей головоломки.
     *
     * @return Подсказка для текущей головоломки.
     */
    String getHint();

    /**
     * Выбирает следующую головоломку для указанного чата.
     *
     * @param chatId Идентификатор чата, для которого выбирается следующая головоломка.
     * @return Сообщение с вопросом следующей головоломки.
     */
    String getNextPuzzle(long chatId);

    /**
     * Возвращает статистику ответов пользователя для указанного чата.
     *
     * @param chatId Идентификатор чата, для которого возвращается статистика.
     * @return Статистика ответов пользователя в виде текстового сообщения.
     */
    String getStatistics(long chatId);

    /**
     * Перезапускает игровую сессию.
     *
     * @param chatId Идентификатор чата, для которого возвращается ответ на загадку.
     * @return Сообщение о начале новой игры.
     */
    String restart(long chatId);

    /**
     * Возвращает ответ на текущую загадку, записывает её как нерешённую и переходит к следующей загадке.
     *
     * @param chatId Идентификатор чата, для которого возвращается ответ на загадку.
     * @return Ответ на текущую загадку и следующая загадка.
     */
    String getAnswerAndNextPuzzle(long chatId);

    /**
     * Метод выбирает случайную головоломку из доступных.
     *
     * @return Ключ выбранной случайной головоломки.
     */
    String getRandomPuzzle();

    /**
     * устанавливает новый список загадок puzzle
     */
     void setPuzzles (Map<String, Puzzle> puzzles);

    /**
     * возвращает все загадки из списка загадок puzzle
     */
    Map<String, Puzzle> getPuzzles();

    /**
     * устанавливает новую текущую загадку
     */
    void setCurrentPuzzle (Puzzle currentPuzzle);
}
